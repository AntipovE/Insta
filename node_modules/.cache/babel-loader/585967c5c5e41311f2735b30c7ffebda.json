{"ast":null,"code":"export default class instaService {\n  constructor() {\n    this.getResource = async url => {\n      const res = await fetch(`${this._apiBase}${url}`);\n\n      if (!res.ok) {\n        throw new Error(`Couldn't fetch ${url}; received ${res.status}`);\n      }\n\n      return await res.json();\n    };\n\n    this.getAllPosts = async () => {\n      const res = await this.getResource(\"/posts/\");\n      return res;\n    };\n\n    this.getAllPhotos = async () => {\n      const res = await this.getResource(\"/posts/\");\n      return res.map(this._transformPosts);\n    };\n\n    this._transformPosts = posts => {\n      return {\n        src: post.src,\n        alt: post.alt\n      };\n    };\n\n    this._apiBase = \"http://localhost:3000\";\n  }\n\n}","map":{"version":3,"sources":["C:/Node/insta/src/services/instaService.js"],"names":["instaService","constructor","getResource","url","res","fetch","_apiBase","ok","Error","status","json","getAllPosts","getAllPhotos","map","_transformPosts","posts","src","post","alt"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,GAAG;AAAA,SAGdC,WAHc,GAGA,MAAMC,GAAN,IAAa;AACzB,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKC,QAAS,GAAEH,GAAI,EAAxB,CAAvB;;AACA,UAAI,CAACC,GAAG,CAACG,EAAT,EAAa;AACX,cAAM,IAAIC,KAAJ,CAAW,kBAAiBL,GAAI,cAAaC,GAAG,CAACK,MAAO,EAAxD,CAAN;AACD;;AACD,aAAO,MAAML,GAAG,CAACM,IAAJ,EAAb;AACD,KATa;;AAAA,SAWdC,WAXc,GAWA,YAAY;AACxB,YAAMP,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAiB,SAAjB,CAAlB;AACA,aAAOE,GAAP;AACD,KAda;;AAAA,SAgBdQ,YAhBc,GAgBC,YAAY;AACzB,YAAMR,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAiB,SAAjB,CAAlB;AACA,aAAOE,GAAG,CAACS,GAAJ,CAAQ,KAAKC,eAAb,CAAP;AACD,KAnBa;;AAAA,SAqBdA,eArBc,GAqBIC,KAAD,IAAU;AACvB,aAAM;AACFC,QAAAA,GAAG,EAACC,IAAI,CAACD,GADP;AAEFE,QAAAA,GAAG,EAACD,IAAI,CAACC;AAFP,OAAN;AAIH,KA1Ba;;AACZ,SAAKZ,QAAL,GAAgB,uBAAhB;AACD;;AAH+B","sourcesContent":["export default class instaService {\r\n  constructor() {\r\n    this._apiBase = \"http://localhost:3000\";\r\n  }\r\n  getResource = async url => {\r\n    const res = await fetch(`${this._apiBase}${url}`);\r\n    if (!res.ok) {\r\n      throw new Error(`Couldn't fetch ${url}; received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  };\r\n\r\n  getAllPosts = async () => {\r\n    const res = await this.getResource(\"/posts/\");\r\n    return res;\r\n  };\r\n\r\n  getAllPhotos = async () => {\r\n    const res = await this.getResource(\"/posts/\");\r\n    return res.map(this._transformPosts);\r\n  };\r\n\r\n  _transformPosts =(posts) =>{\r\n      return{\r\n          src:post.src,\r\n          alt:post.alt\r\n      }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}